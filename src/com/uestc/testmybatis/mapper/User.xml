<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Message">
  <resultMap type="com.uestc.testmybatis.entity.MyMessage" id="MessageResult">
    <id column="ID" jdbcType="INTEGER" property="id"/>
    <result column="COMMAND" jdbcType="VARCHAR" property="command"/>
    <result column="CONTENT" jdbcType="VARCHAR" property="content"/>
    <result column="DESCRIPTION" jdbcType="VARCHAR" property="description"/>
  </resultMap>

  <select id="getAllMessage" parameterType="com.uestc.testmybatis.entity.MyMessage" resultMap="MessageResult">
    select ID,COMMAND,DESCRIPTION,CONTENT from  message where 1=1
    <if test="null != command and !&quot;&quot;.equals(command.trim())">and COMMAND=#{command}</if>
    <if test="null != description and !&quot;&quot;.equals(description.trim())">and DESCRIPTION like '%' #{description} '%'</if>
  </select>
  
  <delete id="deleteOneMessage" parameterType="int">
  	delete from message where ID=#{_parameter}
  </delete>
  <delete id="deleteBatchMessage" parameterType="java.util.List">
   	delete from message where ID in (
   		<foreach collection="list" item="item" separator=",">
   			#{item}
   		</foreach>
   	)
  </delete>
<!-- 
  <select id="version" parameterType="long" resultType="int">
    SELECT version FROM user WHERE id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="delete" parameterType="UserAlias">
    DELETE FROM user WHERE id = #{id:INTEGER}
  </delete>

  <insert id="insert" parameterType="UserAlias" useGeneratedKeys="false">
    INSERT INTO user
    ( id,
    username,
    password,
    administrator
    )
    VALUES
    ( #{id},
    #{username,jdbcType=VARCHAR},
    #{password.encrypted:VARCHAR},
    #{administrator,jdbcType=BOOLEAN}
    )
  </insert>

  <update id="update" parameterType="UserAlias">
    UPDATE user SET
    username = #{username,jdbcType=VARCHAR},
    password = #{password.encrypted,jdbcType=VARCHAR},
    administrator = #{administrator,jdbcType=BOOLEAN}
    WHERE
    id = #{id,jdbcType=INTEGER}
  </update>

    Unique constraint check
  <select id="isUniqueUsername" parameterType="map" resultType="boolean">
    SELECT (count(*) = 0)
    FROM user
    WHERE ((#{userId,jdbcType=BIGINT} IS NOT NULL AND id != #{userId,jdbcType=BIGINT}) OR #{userId,jdbcType=BIGINT} IS
    NULL)  other than me
    AND (username = #{username,jdbcType=VARCHAR})
  </select> -->
</mapper>
